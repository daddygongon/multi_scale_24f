# +qiita_public: c84eaea29a14a5d05945
# +qiita_private: 544df5c3b5924747d485
#+OPTIONS: ^:{}
#+STARTUP: indent nolineimages overview
#+TITLE: チャート式ruby-appendix-V(finite state element)
#+AUTHOR: Shigeto R. Nishitani
#+EMAIL:     (concat "shigeto_nishitani@mac.com")
#+SUBTITLE: 正規表現，ファイルの読み込み
#+LANGUAGE:  jp
#+OPTIONS:   H:4 toc:t num:2
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup



* ファイルからのデータ抽出
csv, yaml, jsonという一般的に使われるformatされたファイルから
読み込むにはそれ専用のライブラリがあります．
使い方も簡単で，ちょっとgoogleばすぐに使えます．
問題は，そのためにはあらかじめformatされている必要があります．
formatされてないけれどもたくさんの繰り返しの中から，
適切にデータを取り出すのに正規表現が使われます．

以下ではオートマトンとか，コンパイラの授業で出てきた
有限状態マシン(finite state machine)というのを使っています．
簡単なparserを作っていることになります．

* 有限状態マシン-I(最初のベタベタcode)
複雑な構文がたくさん繰り返されるときに便利な手法です[^RubyBestPractice]．
たくさんのデータの中から必要な数値だけを取り出したいのですが，
1. '1 F'に続く数値を取り出します．
1. でもrelaxでは無視して，
1. fixの時だけ数値を取り出して，
1. '* fix 'でも数値を取り出して．．．

と説明はややこしいですね．
やりたいことをポンチ絵にすると次の通りです．

[[https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/151211/7a1b1373-6569-bb10-5d80-49d18492bd3a.png][file:./finite_state_machine_vasp.png]]

これだと少しは理解できますか？
こういうことは日常のデータ処理でよく直面します．

これを'divide and conquer'で理解していきます．
まずdivideするのは，状態(state)とactionにです．
そして適切なtriggerとなるkeywordを抽出します．
一文にまとめると，
: triggerにぶつかった時に状態(state)を変えて，同時に適切な振る舞い(action)を取る．

ここまで書くと有限状態マシンであることが認識できると思います．
UMLで書くと図右のようになります．

まずは，あまり凝らずにわかりやすく動作をベタ書きしたコードです．

#+include: ./check_auto_calc_true_false.rb src ruby -n -i

* 有限状態マシン-II(state, event)
さらに明示的に有限状態マシンの状態遷移をcodingする書き方です[^PragmaticProgrammerV2].
少し難しいんですが，焼き直すと次のようになります．

#+name: ./check_auto_calc_state.rb
#+include: ./check_auto_calc_state.rb src ruby -n -i

- `state=:wait_next` の間は，読んでて，
- ':in_data'に遭遇すると'state=:searching'に遷移し,
- ':match_data'で'state = :wait_next'に遷移します．
コツは，'TRANS'というのをあらかじめ用意しておいて，
eventと遷移(transition)先を明示してやることのようです．

* 有限状態マシン-III(state, action分離版)
さらにstateとactionを使って，状態遷移と動作を分離する例がp.177にあります．

これを実装すると以下の通りです．

#+name: ./check_auto_calc_state_action.rb
#+include: ./check_auto_calc_state_action.rb src ruby -n -i

こうするとcodeが短くなりますよね．
triggerをおしゃれに組み込んでいますが，こういうのをスッと書けるのが
Rubyの魅力です．

ただ，debugがしんどいので相当確信を持ってrefactoringしています．
ただ，Huntらが言う通り，広い対象にこのパターンは使えます．
覚えておくと便利ですが．．．

my_helpの説明をしましょう．

* ベストプラクティスから
初めてこのことに言及したテキスト[^RubyBestPractice]のメモを残しておきます．
そこでは，状態の遷移とactionを違ったブロックに分けて処理していました．

複雑な構文がたくさん繰り返されるときに便利な手法です．
よくあるのは，以下のようにkeywordで囲まれたブロックの塊です．
#+begin_example
StartCharMetrics 315
C 32 ; WX 278 ; N space ; B 0 0 0 0 ;
C 33 ; WX 278 ; N exclam ; B 90 0 187 718 ;
C 34 ; WX 355 ; N quotedbl ; B 70 463 285 718 ;
C 35 ; WX 556 ; N numbersign ; B 28 0 529 688 ;
C 36 ; WX 556 ; N dollar ; B 32 -115 520 775 ;
....
EndCharMetrics
#+end_example
Endはないこともあります．

こういうときに便利なのが次のようにブロックの中なのか外なのかを
判断しながらデータを取り出していく手法です．
#+begin_src ruby
  section = []
  File.foreach(file_name) do |line|
    case line
    when /^Start(\w+)/
      section.push $1
      next
    when /^End(\w+)/
      section.pop
      next
    end
  end
#+end_src
状態(in "FontMetircs", or other)をsectionに溜め込みながら逐次的に処理していきます．

データを読み取る方は
#+begin_src ruby
case section
when ["FontMetrics", "CharMetrics"]
  next unless line =~ /^CH?\s/

  name                  = line[/\bN\s+(\.?\w+)\s*;/, 1]
  @glyph_widths[name]   = line[/\bWX\s+(\d+)\s*;/, 1].to_i
  @bounding_boxes[name] = line[/\bB\s+([^;]+);/, 1].to_s.rstrip
when ["FontMetrics", "KernData", "KernPairs"]
  next unless line =~ /^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/
  @kern_pairs[[$1, $2]] = $3.to_i
when ["FontMetrics", "KernData", "TrackKern"], ["FontMetrics", "Composites"]
  next
else
  parse_generic_afm_attribute(line)
end
#+end_src
という感じで，caseに従って読み取る内容を分けています．

* 参照文献
[^PragmaticProgrammerV2]: 達人プログラマー(第2版): 熟達に向けたあなたの旅 (日本語) 単行本 – 2020/11/21
David Thomas (著), Andrew Hunt (著), 村上 雅章 (翻訳), オーム社; 第2版 (2020/11/21), p176.

[^RubyBestPractice]: Rubyベストプラクティス -プロフェッショナルによるコードとテクニック，Gregory Brown (著), 高橋 征義 (監訳), 笹井 崇司  (翻訳)、オライリージャパン (2010/3/26)， [[https://www.oreilly.com/library/view/ruby-best-practices/9780596157487/ch04.html][Ruby Best Practices by Gregory T Brown, O'Reilly, ]]

