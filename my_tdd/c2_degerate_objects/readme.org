#+OPTIONS: ^:{}
#+STARTUP: indent nolineimages overview num
#+TITLE: Kent Beck's Test Driven Development
#+AUTHOR: Shigeto R. Nishitani
#+EMAIL:     (concat "shigeto_nishitani@mac.com")
#+LANGUAGE:  jp
#+OPTIONS:   H:4 toc:t num:2
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

* todo[2/5]
- [ ] $5 + 10 CHF = $10 if rate is 2:1
- [X] $5 * 2 = $10
- [ ] Make "amount" private
- [X] Dollar side-effect?
- [ ] Money rounding?

* mantra 1
- red :: Write a test.
- green :: Make it run.
- refactor :: Make it right.

* the goal is clean code that works
- Clean code that works is 
  - out of the reach of even the best programmers
    - some of the time, and
  - out of the reach of most programmers (like me)
    - most of the time.
- Divide and conquer(各個撃破), baby. 
  - First we'll solve the *"that works"* part
  - Then we'll solve the *"clean ocde"* part.
- This is the opposite of architecture-driven dev.
  - where you solve "clean code" first,
  - .... as you solve "that works" problem.

* three strategies
1. Fake It (c1)
1. Use Obvious Implementation (c2)

1. Triangulation (c3)
* mantra 2
1. Add a little test.
1. Run all tests and fail.
1. Make a little change.
1. Run the tests and succeed.
1. Refactor to remove duplication.
